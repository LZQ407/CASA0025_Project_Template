[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "",
    "text": "1 Project Summary\nThis application identifies and maps critical habitat-use hotspots of the migratory White-naped Crane across East Asia, placing special emphasis on gotspots outside formal nature reserves, and evaluates their ecological condition. By integrating GPS tracking data with environmental indicators of vegetation, temperature, pollution and water availability, it provides conservation practitioners with robust evidence to protect off-reserve crane habitats. Built on Google Earth Engine, the tool offers an intuitive interface that lets users define any region along the migration corridor and explore seasonal and spatial patterns of crane-density hotspots and their habitat quality.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "1.1 Problem Statement",
    "text": "1.1 Problem Statement\nThe White-naped Crane (Grus vipio) depends on a network of seasonal habitats across East Asia, yet many critical stopover and staging sites lie outside formal nature reserves. These off-reserve areas are highly vulnerable to agricultural expansion, urban development, and climate change (Wilcove & Wikelski, 2008). Because they are seasonally used and scattered across jurisdictions, conservationists struggle to gather precise evidence needed for protection (Yanco et al., 2024; Runge et al., 2014). Our application addresses this gap by identifying and evaluating crane hotspots beyond existing reserves to support broader habitat conservation.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#end-user",
    "href": "index.html#end-user",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "1.2 End User",
    "text": "1.2 End User\nOur application is designed for conservationists and environmental NGOs who seek to protect migratory bird habitats, especially off-reserve stopover and staging areas. These users often struggle to communicate the ecological significance of dynamic, short-lived sites to government bodies (Rose et al., 2018). By combining animal movement data with seasonal environmental indicators, our tool enables users to extract spatial evidence that supports off-reserve conservation claims. This helps bridge the gap between scientific data and policy advocacy, empowering practitioners to argue more effectively for new or extended habitat protections.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "1.3 Data",
    "text": "1.3 Data\nWe integrate multi-source remote sensing and ecological tracking datasets. White-naped Crane movement data comes from the “White-naped Crane Mongolia WSCC” study (Batbayar et al., 2024), which provides high-resolution GPS data via the Movebank Repository. Environmental conditions are assessed using MODIS NDVI for vegetation, ERA5 for temperature, Sentinel-5P for pollution levels, and JRC for inland water extent. Nature reserve boundaries are sourced from the Protected Planet database, which provides information of protected areas under global standards. This integrated dataset enables the identification of high-density crane-use hotspots and then the precise, spatiotemporal quantification of environmental quality within those hotspots along the migratory corridor.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#methodology",
    "href": "index.html#methodology",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "1.4 Methodology",
    "text": "1.4 Methodology\nCrane hotspots are extracted by summing GPS-tagged point counts and convolving them with a Gaussian kernel (10 km radius, σ = 10 km) to produce a smooth density surface. Pixels above a user-defined percentile threshold are masked, passed through a 50 m focal-maximum filter, and vectorized into polygons representing hotspots. Hotspots are classified into two categories: fully inside reserves or intersecting/outside reserves, with reserve overlap percentage calculated. Finally, the crane peak season is identified based on the tracking data distribution across four seasons, and mean values of NDVI, 2 m air temperature, tropospheric NO₂ concentration, and water-area fraction is retrieved for that peak season, which will help end users asses habitat quality.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#interface",
    "href": "index.html#interface",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "1.5 Interface",
    "text": "1.5 Interface\nBuilt on Google Earth Engine, this application provides an interactive platform for conservation practitioners to explore crane hotspots. First, users select a target country and province, customize a density threshold, and view hotspots displayed in two layers: fully outside reserves (red) and intersecting or inside reserves (orange). Next, clicking any hotspot opens a panel showing the percentage of its area within nature reserves, the peak crane season, and that season’s average vegetation (NDVI), temperature, NO₂ pollution, and water‐area fraction. These intuitive steps transform complex spatiotemporal data into clear, actionable evidence for off‐reserve crane habitat protection.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#section-a-data-setting",
    "href": "index.html#section-a-data-setting",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "3.1 Section A: Data Setting",
    "text": "3.1 Section A: Data Setting\nThe application centers and initializes a map in ‘SATELLITE’ mode for geographic context.\n// A1: Map Initialization\nMap.setCenter(108, 40, 4);\nMap.setOptions('SATELLITE');\nA cleaned crane tracking FeatureCollection incorporates timestamps via system:time_start to enable temporal filtering. Supplementary vector layers include crane migration corridors, natural reserves, and clipped administrative boundaries (countries, provinces).\n// A2: Data Imports & Preprocessing\nvar cranes = ee.FeatureCollection('projects/casa25gw/assets/cleaned_crane_below100')\n    .map(function(f) {\n        return f.set('system:time_start', f.get('timestamp'));\n    });\nvar convex_hull = ee.FeatureCollection('projects/casa25gw/assets/convex_hull_');\nvar convex_hull_s = ee.FeatureCollection('projects/casa25gw/assets/convex_hull_smooth');\nvar natural_reserves = ee.FeatureCollection('projects/casa25gw/assets/natural_reserves');\nvar countries = ee.FeatureCollection('FAO/GAUL_SIMPLIFIED_500m/2015/level0').filterBounds(convex_hull);\nvar provinces = ee.FeatureCollection('FAO/GAUL_SIMPLIFIED_500m/2015/level1').filterBounds(convex_hull);\nGlobal placeholders track UI state and seasonal filters. A dictionary mapping seasons is created to support later seasonal aggregation.\n// A3: Global Variable Declarations\nvar hotspotsSimplified;\nvar insideLayer;\nvar outsideLayer;\nvar enrichedHotspots;\nvar hotspotLayer;\nvar reserveClass;\nvar threshold_value = 1;\nvar onCountryChange;\nvar onProvinceChange;\nvar hotspotCountLabel = ui.Label('', {\n  color: 'gray',\n  fontSize: '11px',\n  margin: '8px 8px 8px 8px'\n});\n\nvar seasons = {\n    Winter: ee.Filter.or(\n        ee.Filter.calendarRange(12, 12, 'month'),\n        ee.Filter.calendarRange(1, 2, 'month')),\n    Spring: ee.Filter.calendarRange(3, 5, 'month'),\n    Summer: ee.Filter.calendarRange(6, 8, 'month'),\n    Autumn: ee.Filter.calendarRange(9, 11, 'month')\n    };\nvar seasonNames = ee.List(['Winter', 'Spring', 'Summer', 'Autumn']);\n2018-2021 collections of the four environmental datasets: NDVI (MODIS), air temperature (ERA5), tropospheric NO2 (Sentinel-5P), and water presence (JRC Monthly History) are filtered.\n// A4: Load Environmental layers\nvar envStart = ee.Date('2018-01-01'),\n    envEnd = ee.Date('2021-12-31');\nvar ndviCol = ee.ImageCollection('MODIS/061/MOD13A1')\n    .filterDate(envStart, envEnd).select('NDVI');\nvar tempCol = ee.ImageCollection('ECMWF/ERA5/DAILY')\n    .filterDate(envStart, envEnd).select('mean_2m_air_temperature');\nvar no2Col = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n    .filterDate(envStart, envEnd).select('tropospheric_NO2_column_number_density');\nvar waterCol = ee.ImageCollection('JRC/GSW1_4/MonthlyHistory')\n    .filterDate(envStart, envEnd);",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#section-b-data-preprocessing",
    "href": "index.html#section-b-data-preprocessing",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "3.2 Section B: Data Preprocessing",
    "text": "3.2 Section B: Data Preprocessing\nThe safeMeanWithFallback function computes seasonal means, defaulting to annual means if insufficient data exists, ensuring every season has valid data.\n// B1: Function to get the mean by season by total time span\nfunction safeMeanWithFallback(seasonCol, annualCol) {\n    return ee.Image(ee.Algorithms.If(\n        seasonCol.size().gt(0), seasonCol.mean(), annualCol.mean()\n    ));\n    }\nvar annual = {\n    NDVI: ndviCol,\n    Temp: tempCol,\n    NO2: no2Col\n    };\nNDVI and temperature units are rescaled, with bands renamed/clipped to the migration corridor. Precomputing these composites optimizes later queries by reducing each time series to four seasonal images.\n// B2: Get Seasonal data from NDVI, Temperature and Pollution Layers \nvar envComposites = ee.Dictionary({});\nseasonNames.getInfo().forEach(function(season) {\n    envComposites = envComposites.set(season, {\n        NDVI: safeMeanWithFallback(ndviCol.filter(seasons[season]), annual.NDVI)\n            .multiply(0.0001).rename('NDVI').clip(convex_hull),\n        Temp: safeMeanWithFallback(tempCol.filter(seasons[season]), annual.Temp)\n            .subtract(273.15).rename('Temp').clip(convex_hull),\n        NO2: safeMeanWithFallback(no2Col.filter(seasons[season]), annual.NO2)\n            .rename('NO2').clip(convex_hull)\n       \n    });\n});\nWater masks identify permanent water (JRC class 2) per season (water == 2), calculating hotspot water coverage percentages.\n// B3: Get seasonal data of water proportion \nvar waterMaskComposites = ee.Dictionary({});\nseasonNames.getInfo().forEach(function(seasonName) {\n  var wm = waterCol\n    .filter(seasons[seasonName])        \n    .map(function(img) {\n      return img.select('water').eq(2); \n    })\n    .max()                               \n    .rename('WaterMask')\n    .clip(convex_hull);\n  waterMaskComposites = waterMaskComposites.set(seasonName, wm);\n});\nCountry borders, nature reserves, and the corridor are styled and added to the core map layer.\n// B4: Core Map Layers Styling\n\nvar reservesLayer = natural_reserves.style({ color: '#006400', fillColor: '#00640088', width: 1 });\nvar countriesLayer = countries.style({ color: 'black', fillColor: '#cccccc00', width: 1.8 });\nvar corridorLayer = convex_hull_s.style({ color: 'cccccc30', fillColor: '#cccccc25', width: 1 });\n\nMap.addLayer(reservesLayer, {}, 'Nature Reserves', true);\nMap.addLayer(countriesLayer, {}, 'Country Borders', true);\nMap.addLayer(corridorLayer, {}, 'Migration Corridor', true);",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#section-c-utility-functions",
    "href": "index.html#section-c-utility-functions",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "3.3 Section C: Utility Functions",
    "text": "3.3 Section C: Utility Functions\ngetBestZoomLevel measures the maximum latitude/longitude span of the selected region bounds and maps it to one of five preset zoom levels.\n// C1: Compute Optimal Zoom Level\nfunction getBestZoomLevel(bounds) {\n  var coords  = ee.List(bounds.coordinates().get(0));\n  var lats    = coords.map(function(c) { return ee.Number(ee.List(c).get(1)); });\n  var lngs    = coords.map(function(c) { return ee.Number(ee.List(c).get(0)); });\n  var latDiff = ee.Number(lats.reduce(ee.Reducer.max())).subtract(ee.Number(lats.reduce(ee.Reducer.min())));\n  var lngDiff = ee.Number(lngs.reduce(ee.Reducer.max())).subtract(ee.Number(lngs.reduce(ee.Reducer.min())));\n  var maxDiff = latDiff.max(lngDiff);\n  return ee.Algorithms.If(maxDiff.gt(150),3.5,\n         ee.Algorithms.If(maxDiff.gt(50), 4.5,\n         ee.Algorithms.If(maxDiff.gt(30), 5.3,\n         ee.Algorithms.If(maxDiff.gt(15), 5.9,\n         ee.Algorithms.If(maxDiff.gt(7),  6.8,7.5)))));\n}\nupdateHotspotCount filters hotspotSimplified by the given region, evaluates the count of hotspots, and show the number of matching hotspots in the slider panel.\n// C2: Update Hotspot Count Display\nfunction updateHotspotCount(geometry) {\n  if (hotspotsSimplified && geometry) {\n    var filtered = hotspotsSimplified.filterBounds(geometry);\n    filtered.size().evaluate(function(count) {\n      if (count &gt; 0) {\n        hotspotCountLabel.setValue(count + ' HOTSPOTS MATCH THE FILTERING CRITERIA.');\n      } else {\n        hotspotCountLabel.setValue('NO HOTSPOTS FOUND. TRY A LOWER VALUE OR CHANGE REGION.');\n      }\n    });\n  } else {\n    hotspotCountLabel.setValue('SOMETHING WENT WRONG. PLEASE RESET.');\n  }\n}\nrenderHotspotLayers classifies each hotspot as “(partially) inside” or “outside” of reserves and then adds two styled map layers (red for outside, orange for inside).\n// C3: Render Hotspot Layers by Reserve Class\nfunction renderHotspotLayers(collection, namePrefix) {\n  //create an inside/outside variable for each hotspot\n  var hotspotsSimplified = collection.map(function(feature) {\n    var reserveClass = feature.get('reserveClass');\n    var newClass = ee.Algorithms.If(\n      ee.String(reserveClass).equals('outside'),\n      'outside',\n      'inside'\n    );\n    return feature.set('newReserveClass', newClass);\n  });\n\n  var outside = hotspotsSimplified.filter(ee.Filter.eq('newReserveClass', 'outside'));\n  var inside  = hotspotsSimplified.filter(ee.Filter.eq('newReserveClass', 'inside'));\n\n  Map.addLayer(outside, {color: '#FF0000', fillColor: '#FF000088', width: 2}, namePrefix + ' Outside Reserves');\n  Map.addLayer(inside, {color: '#ff8c00', fillColor: '#ff8c0088', width: 2}, namePrefix + ' Intersecting Reserves');\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#section-d-ui-components",
    "href": "index.html#section-d-ui-components",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "3.4 Section D: UI Components",
    "text": "3.4 Section D: UI Components\nThe main control panel provides the app title and serves as a dynamic container for all sub-panels.\n// D1: Main Control Panel\nvar mainPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position:       'middle-left',       \n    padding:        '8px',\n    backgroundColor:'white',\n    border:         '1px solid #666',\n    borderRadius:   '6px',\n    width:          '360px',\n    maxHeight:      '80%'            \n  }\n  });\n\nmainPanel.add(ui.Label('Mapping Crane Density Hotspots to Guide Off‑Reserve Conservation',\n  { fontWeight:'bold', fontSize:'20px' }  ));\nMap.add(mainPanel);\nThe density slider panel houses the 1-100 percentile slider, explanatory labels, and the hotspot count label for real-time filtering.\n// D2: Density Slider Sub-Panel\nvar sliderPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position: 'middle-left', padding: '8px', backgroundColor: 'white',\n    border: '1px solid #666', borderRadius: '6px', width: '360px', margin: '10px 0 0 8px'\n  }\n});\n\nsliderPanel.add(ui.Label('Set hotspots density percentile', {\n  fontWeight: 'bold', fontSize: '14px',margin: '6px 0px 0px 6px' \n}));\n\nsliderPanel.add(ui.Label('Higher slider values display progressively denser hotspots\\n(1 = areas at the 99th percentile; 100 = only the highest-density areas).', {fontWeight: 'normal', fontSize: '12px',margin: '4px 0px 6px 6px', color: '#3b3b3b', whiteSpace: 'pre-line'  \n}));\n\nvar percentileSlider = ui.Slider({\n  min: 1, max: 100, step: 1, value: threshold_value,\n  style: {stretch: 'horizontal'}\n});\n\nsliderPanel.add(percentileSlider);\nsliderPanel.add(hotspotCountLabel);  \nMap.add(sliderPanel);\nhomeButton and resetButton buttons are created to restore the map view, panel layout, and slider/selection values to their defaults in one click.\n// D3: Home Button\nvar homeButton = ui.Button({\n  label: 'Home',\n  style: { stretch: 'horizontal', margin: '20px 8px 8px 8px' },\n  onClick: function() {\n    Map.layers().reset();\n    mainPanel.remove(infoPanel);\n    mainPanel.remove(statisticsPanel);\n    mainPanel.remove(descriptionPanel);\n    mainPanel.add(descriptionPanel);\n    mainPanel.remove(regionPanel);\n    mainPanel.add(regionPanel);\n    mainPanel.remove(homeButton);\n    \n    countrySelect.setValue(null, false);\n    provinceSelect.items().reset(['(No provinces)']);\n    provinceSelect.setValue(null, false);\n    percentileSlider.setValue(1, false);\n    \n    Map.addLayer(reservesLayer, {}, 'Nature Reserves', true);\n    Map.addLayer(countriesLayer, {}, 'Country borders', true);\n    Map.addLayer(corridorLayer, {}, 'Migration corridor', true);\n    Map.setCenter(108, 40, 4);\n    Map.setOptions('SATELLITE');\n    \n    Map.remove(sliderPanel)\n    Map.add(sliderPanel)\n    \n    updateHotspotsFromSlider(1);    \n  }\n});\n\n// D4: Reset Button\nvar resetButton = ui.Button({\n  label: 'Reset',\n  style: {stretch: 'horizontal', margin: '20px 8px 8px 8px'},\n  onClick: function() {\n    \n    countrySelect.setValue(null, false);\n    provinceSelect.items().reset(['(Select a country first)']);\n    provinceSelect.setValue(null, false);\n\n    percentileSlider.setValue(1, false);\n\n    Map.layers().reset();\n    Map.addLayer(reservesLayer, {}, 'Nature Reserves', true);\n    Map.addLayer(countriesLayer, {}, 'Country borders', true);\n    Map.addLayer(corridorLayer, {}, 'Migration corridor', true);\n    Map.setCenter(108, 40, 4);\n    Map.setOptions('SATELLITE');\n    \n    mainPanel.remove(homeButton);\n\n    updateHotspotsFromSlider(1);\n  }\n});\ninfoPanel and statisticsPanel define hotspot attribute descriptions (crane peak season, total crane counts, reserve coverage status, NDVI, temperature, NO2, water area fraction) and display actual values (via addInfoRow) when a hotspot is clicked.\n// D5: Environmental Information Panel\nvar infoPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical') });\ninfoPanel.add(ui.Label(\n  'Step 2: Retrieve Hotspot Info',\n  { fontWeight: 'bold', fontSize: '18px' }\n));\ninfoPanel.add(ui.Label(\n  'Click any hotspot to retrieve its crane peak season, total cranes detected, and four important environmental components relevant to their habitats (Batbayar et al., 2024).',\n  { whiteSpace: 'wrap', fontSize: '12px' }\n));\ninfoPanel.add(ui.Label('Peak Season:',      { fontWeight:'bold', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Season with maximum crane density in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Total Cranes:',      { fontWeight:'bold', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Number of crane observations recorded in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Reserve coverage (%):',      { fontWeight:'bold', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Percentage of hotspot area inside a protected nature reserve.', { whiteSpace:'wrap', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Average NDVI:',     { fontWeight:'bold', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Mean NDVI during peak season (2018–2021).', { whiteSpace:'wrap', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Average Temp (°C):',{ fontWeight:'bold', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Mean 2 m air temperature during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Average NO₂:',      { fontWeight:'bold', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Mean tropospheric NO₂ column density during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));\ninfoPanel.add(ui.Label('Water Area (%):',   { fontWeight:'bold', fontSize:'12px' }));\ninfoPanel.add(ui.Label(\n  'Percentage of hotspot polygon area classified as water during its peak season.',\n  { whiteSpace:'wrap', fontSize:'12px' }\n));\n\n// D6: Hotspot Statistics Panel\nvar statisticsPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical') });\n\nstatisticsPanel.style().set({\n  minHeight: '100px',\n  padding: '10px'\n});\n\nfunction addInfoRow(name, widget) {\n  statisticsPanel.add(ui.Panel([\n    ui.Label(name + ':', { fontWeight:'bold', fontSize:'12px' }),\n    widget\n  ], ui.Panel.Layout.flow('horizontal')));\n}\ndescriptionPanel shows the app’s goal and data span in text, plus a hyperlink to the crane dataset.\n// D7: App Description Sub-Panel\nvar descriptionPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical'), style: { margin:'8px 0 0 0' }});\n\ndescriptionPanel.add(ui.Label(\n  'This application maps high‑density crane hotspots, many of which lie outside formally protected reserves, to inform off‑reserve conservation planning by displaying each hotspot’s peak‑season environmental drivers of habitat suitability. The dataset spans August 2013 through April 2021.',\n  { whiteSpace:'wrap', color:'gray', fontStyle:'italic', fontSize:'13px' }\n));\n\ndescriptionPanel.add(ui.Label('Click here for the crane source data (Batbayar et al. 2024)', {\n  fontSize: '12px', color: 'blue', fontStyle: 'italic', textDecoration: 'underline'\n}, 'https://datarepository.movebank.org/entities/datapackage/1e31df42-edfa-4225-b923-d8b0de83ab20'));\n\nmainPanel.add(descriptionPanel);\nregionPanel contains country/province dropdowns (with onChange callbacks), labels, and the Reset button to guide users through the region selection.\n// D8: Region Selection Handlers (Stubs)\nvar countrySelect  = ui.Select({ placeholder:'Select Country' });\nvar provinceSelect = ui.Select({ placeholder:'Select Province' });\n\n// D9: Region Selector Panel\nvar regionPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: { margin:'8px 0 0 0' }\n});\n\nregionPanel.add(ui.Label(\n  'Step 1: Select Your Region',\n  { fontWeight:'bold', fontSize:'14px' }\n));\nregionPanel.add(ui.Label(\n  'Choose a country and a province to zoom in. Layers may take up to one minute to fully process after each click.',\n  { whiteSpace:'wrap', fontSize:'12px' }\n));\n\nregionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(countrySelect);\nregionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));\nregionPanel.add(provinceSelect);\nregionPanel.add(resetButton);\nmainPanel.add(regionPanel);",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#section-e-hotspot-extraction",
    "href": "index.html#section-e-hotspot-extraction",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "3.5 Section E: Hotspot Extraction",
    "text": "3.5 Section E: Hotspot Extraction\nCrane point counts (count = 1) are rasterized via reduceToImage and then convolved with a Gaussian kernel of radius 10 km and σ = 10 km to produce a smooth density surface. In continuous form, the weighting follows: \\[\nK(d) = \\frac{1}{\\sqrt{2\\pi}\\,\\sigma}\\exp\\!\\Bigl(-\\frac{d^2}{2\\sigma^2}\\Bigr),\n\\]\nThis ensures that observations contribute most strongly near their true location and taper off smoothly.\n// E1: Density Image Creation\nvar kernel = ee.Kernel.gaussian({\n    radius: 10000,\n    sigma: 10000,\n    units: 'meters'\n    });\n    \nvar densityImage = cranes\n    .map(function(f) {\n        return f.set('count', 1);\n    })\n    .reduceToImage(['count'], ee.Reducer.sum())\n    .convolve(kernel)\n    .reproject('EPSG:4326', null, 1000)\n    .clip(convex_hull);\nCountry/province selection resets layers, zooms to the regional bounds (with borders and reserves redrawn), then filters and renders hotspotsSimplified within it.\n// E2: Country-Based Filtering Handler\nonCountryChange = function(countryName) {\n  Map.layers().reset()\n\n  var selectedCountryFeatures = countries.filter(ee.Filter.eq('ADM0_NAME', countryName));\n  updateHotspotCount(selectedCountryFeatures);\n\n  var provs = provinces\n    .filter(ee.Filter.eq('ADM0_NAME', countryName))\n    .aggregate_array('ADM1_NAME')\n    .distinct()\n    .sort();\n\n  provs.evaluate(function(list) {\n    provinceSelect.items().reset(list.length ? list : ['(No provinces)']);\n  });\n\n  var bounds = selectedCountryFeatures.geometry().bounds();\n  getBestZoomLevel(bounds).evaluate(function(z) {\n    Map.centerObject(bounds, z);\n  });\n\n  Map.add(ui.Map.Layer(selectedCountryFeatures.style({\n    color: 'black', fillColor: '#cccccc05', width: 2\n  }), {}, countryName + ' Border'));\n\n  Map.add(ui.Map.Layer(natural_reserves.filterBounds(selectedCountryFeatures).style({\n    color: '#006400', fillColor: '#00640075', width: 1\n  }), {}, countryName +' Nature Reserves'));\n  \n  var provincesSelected = provinces.filter(ee.Filter.eq('ADM0_NAME', countryName));\n  var selectedCountryGeometry = provincesSelected.geometry().dissolve();\n  \n  Map.add(ui.Map.Layer(provincesSelected.style({\n    color: 'black', fillColor: '#cccccc15', width: 1\n  }), {}, 'Provinces within migration corridor'));\n  \n  if (outsideLayer) Map.remove(outsideLayer);\n  if (insideLayer) Map.remove(insideLayer);\n  \n  if (hotspotsSimplified) {\n    var filteredHotspots = hotspotsSimplified.filterBounds(selectedCountryGeometry);\n    renderHotspotLayers(filteredHotspots, 'Filtered Hotspots');\n  }\n};\n\n// E3: Province-Based Filtering Handler\nonProvinceChange = function(provinceName) {\n  Map.style().set('cursor', 'crosshair');\n  if (provinceName === '(No provinces)') return;\n  \n  Map.layers().reset();\n  mainPanel.remove(regionPanel)\n  mainPanel.remove(descriptionPanel)\n  mainPanel.remove(infoPanel)\n  mainPanel.add(infoPanel)\n  mainPanel.remove(homeButton)\n  mainPanel.add(homeButton)\n  \n  var selectedProvince = provinces.filter(\n    ee.Filter.eq('ADM1_NAME', provinceName)\n  );\n  var bounds = selectedProvince.geometry().bounds();\n  getBestZoomLevel(bounds).evaluate(function(z) {\n    Map.centerObject(bounds, z);\n  });\n  updateHotspotCount(selectedProvince.geometry());\n  \n  var countryName = selectedProvince.first().get('ADM0_NAME');\n  var selectedCountryFeatures = countries.filter(\n    ee.Filter.eq('ADM0_NAME', countryName)\n  );\n  \n  Map.add(ui.Map.Layer(\n    selectedCountryFeatures.style({\n      color: '#333333',\n      fillColor: '00000000',\n      width: 2\n    }),\n    {},\n    countrySelect.getValue() + ' Border'\n  ));\n\n  Map.add(ui.Map.Layer(\n    provinces.filter(ee.Filter.eq('ADM0_NAME', countryName)).style({\n      color: '#0f0f0f',\n      fillColor: '#dddddd00',\n      width: 1\n    }),\n    {},\n    'Other Provinces'\n  ));\n\n  Map.add(ui.Map.Layer(\n    natural_reserves.filterBounds(selectedProvince).style({\n      color: '#006400',\n      fillColor: '#00640075',\n      width: 1\n    }),\n    {},\n    'Nature Reserves'\n  ));\n\n  Map.add(ui.Map.Layer(\n    selectedProvince.style({\n      color: 'black',\n      fillColor: '#cccccc20',\n      width: 2\n    }),\n    {},\n    provinceName + ' Border'\n  ));\n  \n  if (outsideLayer) Map.remove(outsideLayer);\n  if (insideLayer) Map.remove(insideLayer);\n  \n  if (hotspotsSimplified) {\n    var filteredHotspots = hotspotsSimplified.filterBounds(selectedProvince);\n    renderHotspotLayers(filteredHotspots, 'Filtered Hotspots');\n  }\n};\nWhen the percentile slider changes, the code computes a new density threshold on the smoothed crane-density image for the selected region, vectorizes to polygons, classifies each by reserve coverage, enriches with crane counts plus peak-season NDVI, temperature, NO2, and water-area metrics.\n// E4: Percentile-Based Hotspot Generation\npercentileSlider.onChange(function(val) {\n  updateHotspotsFromSlider(val);\n});\n\nfunction updateHotspotsFromSlider(clientValue) {\n  \n  // E4.1: Read slider value\n  threshold_value = clientValue;\n  \n  // E4.2: Determine region geometry\n  var region = convex_hull;\n  var selectedProvince = provinceSelect.getValue();\n  if (selectedProvince && selectedProvince !== '(No provinces)') {\n    region = provinces.filter(ee.Filter.eq('ADM1_NAME', selectedProvince)).geometry();\n  } else {\n    var selectedCountry = countrySelect.getValue();\n    if (selectedCountry) {\n      region = countries.filter(ee.Filter.eq('ADM0_NAME', selectedCountry)).geometry();\n    }\n  }\n  \n  // E4.3: Compute density threshold\n  var transformedPercentile = 100 - ((100 - threshold_value) / 99);\n  var newThreshold = densityImage.reduceRegion({\n    reducer: ee.Reducer.percentile([transformedPercentile]),\n    geometry: region,\n    scale: 1000,\n    bestEffort: true\n  }).values().getNumber(0);\n\n  // E4.4: Extract and classify hotspot polygons\n  hotspotsSimplified = densityImage\n    .clip(region)\n    .gte(newThreshold)\n    .reduceResolution({ reducer: ee.Reducer.max(), maxPixels: 1024 })\n    .selfMask()\n    .focal_max({ radius: 50, units: 'meters' })\n    .reduceToVectors({\n      geometry: convex_hull,\n      scale: 2000,\n      geometryType: 'polygon',\n      eightConnected: false,\n      tileScale: 16,\n      bestEffort: true,\n      maxPixels: 1e13\n    }).map(function(f) {\n      var geom = f.geometry();\n      var areaTotal = geom.area(1);\n      var inter = natural_reserves.map(function(r) { return r.intersection(geom, 1); })\n                                  .union().geometry();\n      var areaInter = inter.area(1);\n      var perc = areaInter.divide(areaTotal).multiply(100);\n      var reserveClass = ee.String(\n        ee.Algorithms.If(perc.lte(5), 'outside', 'inside')\n      );\n      return f.set({ reserveCoverage: perc, reserveClass: reserveClass }).simplify(2000);\n    });\n\n  // E4.5: Enrich with crane counts, env metrics & spatial water‐area\n  enrichedHotspots = hotspotsSimplified.map(function(poly) {\n    var g = poly.geometry();\n    var regionCranes = cranes.filterBounds(g);\n    var counts = seasonNames.map(function(s) {\n      return regionCranes.filter(ee.Dictionary(seasons).get(s)).size();\n    });\n    var peak   = seasonNames.get(\n                   ee.List(counts).indexOf(ee.List(counts).reduce(ee.Reducer.max()))\n                 );\n    var total  = regionCranes.size();\n    var inRes  = natural_reserves.filterBounds(g).size().gt(0);\n    var env = ee.Dictionary(envComposites.get(peak));\n    var ndvi = ee.Image(env.get('NDVI')).reduceRegion({\n      reducer: ee.Reducer.mean(), geometry: g, scale: 500, maxPixels: 1e9\n    }).get('NDVI');\n    var temp = ee.Image(env.get('Temp')).reduceRegion({\n      reducer: ee.Reducer.mean(), geometry: g, scale: 1000, maxPixels: 1e9\n    }).get('Temp');\n    var no2  = ee.Image(env.get('NO2')).reduceRegion({\n      reducer: ee.Reducer.mean(), geometry: g, scale: 1000, maxPixels: 1e9\n    }).get('NO2');\n    var waterMaskImg = ee.Image(\n      ee.Dictionary(waterMaskComposites).get(peak)\n    );\n    var waterAreaFrac = ee.Number(\n      waterMaskImg.reduceRegion({\n        reducer: ee.Reducer.mean(),\n        geometry: g,\n        scale: 30,\n        bestEffort: true,\n        maxPixels: 1e9\n      }).get('WaterMask')   \n    ).multiply(100);\n    return poly.set({\n      peakSeason:    peak,\n      totalCranes:   total,\n      inReserve:     inRes,\n      NDVI:          ndvi,\n      Temp:          temp,\n      NO2:           no2,\n      WaterAreaFrac: waterAreaFrac\n    }).setGeometry(g.transform('EPSG:4326', 1));\n  });\n\n  // E4.6: Render layers & update hotspot count\n  if (outsideLayer) Map.remove(outsideLayer);\n  if (insideLayer) Map.remove(insideLayer);\n  renderHotspotLayers(hotspotsSimplified, 'Filtered Hotspots');\n\n  var selProv = provinceSelect.getValue();\n  if (selProv && selProv !== '(No provinces)') {\n    updateHotspotCount(provinces.filter(ee.Filter.eq('ADM1_NAME', selProv)).geometry());\n  } else {\n    var selCtr = countrySelect.getValue();\n    if (selCtr) {\n      updateHotspotCount(countries.filter(ee.Filter.eq('ADM0_NAME', selCtr)).geometry());\n    } else {\n      updateHotspotCount(convex_hull.geometry());\n    }\n  }\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  },
  {
    "objectID": "index.html#section-f-ui-setting-legend",
    "href": "index.html#section-f-ui-setting-legend",
    "title": "CASA0025 Group Project: Cranes in transit",
    "section": "3.6 Section F: UI Setting & Legend",
    "text": "3.6 Section F: UI Setting & Legend\nCountry and province dropdowns are populated with names from the GAUL dataset, and their onChange events are linked to the filtering handlers defined earlier.\n// F1: Dropdown Initialization & Callbacks\ncountrySelect.onChange(onCountryChange);\nprovinceSelect.onChange(onProvinceChange);\ncountries.aggregate_array('ADM0_NAME').distinct().sort().evaluate(function(list) {\n  countrySelect.items().reset(list);\n});\nA map click event hides region‐selection panels, shows the statistics panel, and fetches the clicked hotspot’s properties from enrichedHotspots to populate detailed rows through addInfoRow. The legend is created at the end.\n// F2: Interaction when clicking hotspot\nMap.onClick(function(coords) {\n  mainPanel.remove(regionPanel);\n  mainPanel.remove(descriptionPanel);\n  mainPanel.remove(infoPanel);\n  mainPanel.remove(statisticsPanel);\n  mainPanel.add(statisticsPanel);\n  mainPanel.remove(homeButton);\n  mainPanel.add(homeButton);\n  Map.remove(sliderPanel);\n\n  statisticsPanel.clear();\n  statisticsPanel.add(ui.Label('Hotspot Information loading...', { fontStyle: 'italic' }));\n\n  var pt = ee.Geometry.Point([coords.lon, coords.lat]);\n  enrichedHotspots.filterBounds(pt).first().evaluate(function(f) {\n    statisticsPanel.clear();\n    if (!f) {\n      statisticsPanel.add(ui.Label('No hotspot here.'));\n    } else {\n      statisticsPanel.add(ui.Label('Hotspot Info', { fontWeight:'bold', fontSize:'16px' }));\n      addInfoRow('- Peak Season', ui.Label(f.properties.peakSeason));\n      addInfoRow('- Total Cranes', ui.Label(f.properties.totalCranes));\n      addInfoRow('- Reserve coverage (%)', ui.Label(\n        (f.properties.reserveCoverage !== null) ?\n        f.properties.reserveCoverage.toFixed(1) + '%' : 'N/A'\n      ));\n      addInfoRow('- Average NDVI', ui.Label(\n        (f.properties.NDVI !== null) ?\n        f.properties.NDVI.toFixed(3) : 'N/A'\n      ));\n      addInfoRow('- Average Temp (°C)', ui.Label(\n        (f.properties.Temp !== null) ?\n        f.properties.Temp.toFixed(2) : 'N/A'\n      ));\n      addInfoRow('- Average NO₂', ui.Label(\n        (f.properties.NO2 !== null) ?\n        Number(f.properties.NO2).toExponential(2) : 'N/A'\n      ));\n      addInfoRow('- Water Area (%)', ui.Label(\n        (f.properties.WaterAreaFrac !== null) ?\n        Number(f.properties.WaterAreaFrac).toFixed(1) + '%' : 'N/A'\n      ));\n    }\n  });\n});\n\n// F3: Legend\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-right', padding: '8px', backgroundColor: 'white'\n  }\n});\nlegend.add(ui.Label('Legend',\n  {fontWeight:'bold', fontSize:'16px', margin:'0 0 4px 0'}\n));\n\nfunction makeLegendSymbol(fillColor, borderColor, name) {\n  return ui.Panel([\n    ui.Label('', {\n      backgroundColor: fillColor,\n      padding: '8px',\n      margin:  '0 0 4px 0',\n      width:   '18px',\n      height:  '18px',\n      border:  '1px solid ' + borderColor\n    }),\n    ui.Label(name, {margin:'0 0 4px 6px'})\n  ], ui.Panel.Layout.flow('horizontal'));\n}\nlegend.add(makeLegendSymbol('#FF000088', '#FF0000', 'Hotspots Outside Reserves'));\nlegend.add(makeLegendSymbol('#ff8c0088', '#ff8c00', 'Hotspots Inside or Partially Inside Reserves'));\n\nlegend.add(makeLegendSymbol('#FFFFFF','#000000', 'Migration Corridor'))\n      .add(makeLegendSymbol('rgba(0,100,0,0.53)', '#006400', 'Nature Reserves'));\nMap.add(legend);\n\n// ========================= RUN APP =========================\n\nupdateHotspotsFromSlider(threshold_value);",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CASA0025 - Cranes in Transit</span>"
    ]
  }
]
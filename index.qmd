# CASA00025 Group Project: Cranes in Transit

## Project Summary

This project visualizes seasonal habitat use of the migratory White-naped Crane across East Asia. By integrating GPS tracking data with environmental indicators such as vegetation, temperature, pollution, and water availability, the application identifies critical hotspots and evaluates their ecological quality. Designed for conservation practitioners, the tool supports science-based advocacy by enabling users to generate evidence that informs policy and habitat protection. Built on Google Earth Engine, it offers an accessible, interactive interface to explore temporal patterns and argue for conservation priorities at regional and national levels.

### Problem Statement

Migratory species like the White-naped Crane (Grus vipio) rely on multiple seasonal habitats across East Asia for survival. However, many of these areas—especially temporary stopover sites—are under threat from agricultural expansion, urban development, and climate variability (Wilcove and Wikelski, 2008). These habitats often fall outside existing protected areas and are ecologically important only during specific time windows. Because such spatiotemporal dynamics are difficult to observe and document, conservationists face challenges in presenting compelling scientific evidence that justifies habitat protection (Yanco et al., 2024; Runge et al., 2014).

### End User

Our application is designed for conservationists and environmental NGOs who seek to protect migratory bird habitats. These users often struggle to communicate the ecological significance of dynamic, short-lived stopover areas to government bodies. By combining animal movement data with seasonal environmental indicators, our tool enables users to extract spatial evidence that supports conservation claims. This helps bridge the gap between scientific data and policy advocacy, empowering practitioners to argue more effectively for new or extended habitat protections (Rose et al., 2018).

### Data

We integrate multi-source remote sensing and ecological tracking datasets. White-naped Crane movement data comes from the “White-naped Crane Mongolia WSCC” study (Batbayar et al., 2024), which provides high-resolution GPS data via the Movebank Repository. Environmental conditions are assessed using MODIS NDVI for vegetation, ERA5 for temperature, Sentinel-5P for pollution levels, and GLCF for inland water extent. Nature reserve boundaries are sourced from the Protected Planet database, which provides information of protected areas under global standards. Together, these datasets allow us to quantify the environmental quality of crane habitats across space and time (Turner et al., 2003).

### Methodology

We detect crane hotspots by applying Gaussian kernel smoothing to GPS tracking points, generating a density surface (Yanco et al., 2024). Hotspots are selected above a user-defined percentile threshold. Each hotspot is enriched with seasonal environmental metrics—NDVI, temperature, NO₂, and water presence—based on remote sensing datasets from 2018–2021 (Turner et al., 2003). We also check for overlap with protected areas. This approach links habitat quality with crane movement to support evidence-based conservation planning (Runge et al., 2014).

### Interface

Built on Google Earth Engine, the application provides an interactive platform for conservationists without coding skills (Rose et al., 2018). Users can filter crane hotspots by country or province, adjust density thresholds, and click to view seasonal environmental summaries. Layers for vegetation, temperature, pollution, and water fraction are displayed contextually (Collen et al., 2013). Simple controls and clear outputs help users translate complex spatiotemporal data into advocacy evidence to promote habitat protection.

## The Application

Replace the link below with the link to your application.

::: column-page
<iframe src="https://casa25gw.projects.earthengine.app/view/cranes-in-transit" width="100%" height="700px">

</iframe>
:::

## How it Works

### Section A: Data Setting

The application centers and initializes a map in ‘SATELLITE’ mode for geographic context.

``` js
// A1: Map Initialization
Map.setCenter(108, 40, 4);
Map.setOptions('SATELLITE');
```

A cleaned crane tracking `FeatureCollection` incorporates timestamps via `system:time_start` to enable temporal filtering. Supplementary vector layers include crane migration corridors, natural reserves, and clipped administrative boundaries (`countries`, `provinces`).

``` js
// A2: Data Imports & Preprocessing
var cranes = ee.FeatureCollection('projects/casa25gw/assets/cleaned_crane_below100')
    .map(function(f) {
        return f.set('system:time_start', f.get('timestamp'));
    });
var convex_hull = ee.FeatureCollection('projects/casa25gw/assets/convex_hull_');
var convex_hull_s = ee.FeatureCollection('projects/casa25gw/assets/convex_hull_smooth');
var natural_reserves = ee.FeatureCollection('projects/casa25gw/assets/natural_reserves');
var countries = ee.FeatureCollection('FAO/GAUL_SIMPLIFIED_500m/2015/level0').filterBounds(convex_hull);
var provinces = ee.FeatureCollection('FAO/GAUL_SIMPLIFIED_500m/2015/level1').filterBounds(convex_hull);
```

Global placeholders track UI state and seasonal filters. A dictionary mapping `seasons` is created to support later seasonal aggregation.

``` js
// A3: Global Variable Declarations
var hotspotsSimplified;
var insideLayer;
var outsideLayer;
var enrichedHotspots;
var hotspotLayer;
var reserveClass;
var threshold_value = 1;
var onCountryChange;
var onProvinceChange;
var hotspotCountLabel = ui.Label('', {
  color: 'gray',
  fontSize: '11px',
  margin: '8px 8px 8px 8px'
});

var seasons = {
    Winter: ee.Filter.or(
        ee.Filter.calendarRange(12, 12, 'month'),
        ee.Filter.calendarRange(1, 2, 'month')),
    Spring: ee.Filter.calendarRange(3, 5, 'month'),
    Summer: ee.Filter.calendarRange(6, 8, 'month'),
    Autumn: ee.Filter.calendarRange(9, 11, 'month')
    };
var seasonNames = ee.List(['Winter', 'Spring', 'Summer', 'Autumn']);
```

2018-2021 collections of the four environmental datasets: NDVI (MODIS), air temperature (ERA5), tropospheric NO2 (Sentinel-5P), and water presence (JRC Monthly History) are filtered. 

``` js
// A4: Load Environmental layers
var envStart = ee.Date('2018-01-01'),
    envEnd = ee.Date('2021-12-31');
var ndviCol = ee.ImageCollection('MODIS/061/MOD13A1')
    .filterDate(envStart, envEnd).select('NDVI');
var tempCol = ee.ImageCollection('ECMWF/ERA5/DAILY')
    .filterDate(envStart, envEnd).select('mean_2m_air_temperature');
var no2Col = ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')
    .filterDate(envStart, envEnd).select('tropospheric_NO2_column_number_density');
var waterCol = ee.ImageCollection('JRC/GSW1_4/MonthlyHistory')
    .filterDate(envStart, envEnd);
```

### Section B: Data Preprocessing

The `safeMeanWithFallback` function computes seasonal means, defaulting to annual means if insufficient data exists, ensuring every season has valid data.

``` js
// B1: Function to get the mean by season by total time span
function safeMeanWithFallback(seasonCol, annualCol) {
    return ee.Image(ee.Algorithms.If(
        seasonCol.size().gt(0), seasonCol.mean(), annualCol.mean()
    ));
    }
var annual = {
    NDVI: ndviCol,
    Temp: tempCol,
    NO2: no2Col
    };
```

NDVI and temperature units are rescaled, with bands renamed/clipped to the migration corridor. Precomputing these composites optimizes later queries by reducing each time series to four seasonal images.

``` js
// B2: Get Seasonal data from NDVI, Temperature and Pollution Layers 
var envComposites = ee.Dictionary({});
seasonNames.getInfo().forEach(function(season) {
    envComposites = envComposites.set(season, {
        NDVI: safeMeanWithFallback(ndviCol.filter(seasons[season]), annual.NDVI)
            .multiply(0.0001).rename('NDVI').clip(convex_hull),
        Temp: safeMeanWithFallback(tempCol.filter(seasons[season]), annual.Temp)
            .subtract(273.15).rename('Temp').clip(convex_hull),
        NO2: safeMeanWithFallback(no2Col.filter(seasons[season]), annual.NO2)
            .rename('NO2').clip(convex_hull)
       
    });
});
```

Water masks identify permanent water (JRC class 2) per season (`water == 2`), calculating hotspot water coverage percentages.

``` js
// B3: Get seasonal data of water proportion 
var waterMaskComposites = ee.Dictionary({});
seasonNames.getInfo().forEach(function(seasonName) {
  var wm = waterCol
    .filter(seasons[seasonName])        
    .map(function(img) {
      return img.select('water').eq(2); 
    })
    .max()                               
    .rename('WaterMask')
    .clip(convex_hull);
  waterMaskComposites = waterMaskComposites.set(seasonName, wm);
});
```

Country borders, nature reserves, and the corridor are styled and added to the core map layer. 

``` js
// B4: Core Map Layers Styling

var reservesLayer = natural_reserves.style({ color: '#006400', fillColor: '#00640088', width: 1 });
var countriesLayer = countries.style({ color: 'black', fillColor: '#cccccc00', width: 1.8 });
var corridorLayer = convex_hull_s.style({ color: 'cccccc30', fillColor: '#cccccc25', width: 1 });

Map.addLayer(reservesLayer, {}, 'Nature Reserves', true);
Map.addLayer(countriesLayer, {}, 'Country Borders', true);
Map.addLayer(corridorLayer, {}, 'Migration Corridor', true);
```

### Section C: Utility Functions

`getBestZoomLevel` measures the maximum latitude/longitude span of the selected region bounds and maps it to one of five preset zoom levels.

``` js
// C1: Compute Optimal Zoom Level
function getBestZoomLevel(bounds) {
  var coords  = ee.List(bounds.coordinates().get(0));
  var lats    = coords.map(function(c) { return ee.Number(ee.List(c).get(1)); });
  var lngs    = coords.map(function(c) { return ee.Number(ee.List(c).get(0)); });
  var latDiff = ee.Number(lats.reduce(ee.Reducer.max())).subtract(ee.Number(lats.reduce(ee.Reducer.min())));
  var lngDiff = ee.Number(lngs.reduce(ee.Reducer.max())).subtract(ee.Number(lngs.reduce(ee.Reducer.min())));
  var maxDiff = latDiff.max(lngDiff);
  return ee.Algorithms.If(maxDiff.gt(150),3.5,
         ee.Algorithms.If(maxDiff.gt(50), 4.5,
         ee.Algorithms.If(maxDiff.gt(30), 5.3,
         ee.Algorithms.If(maxDiff.gt(15), 5.9,
         ee.Algorithms.If(maxDiff.gt(7),  6.8,7.5)))));
}
```

`updateHotspotCount` filters `hotspotSimplified` by the given region, evaluates the count of hotspots, and show the number of matching hotspots in the slider panel.

``` js
// C2: Update Hotspot Count Display
function updateHotspotCount(geometry) {
  if (hotspotsSimplified && geometry) {
    var filtered = hotspotsSimplified.filterBounds(geometry);
    filtered.size().evaluate(function(count) {
      if (count > 0) {
        hotspotCountLabel.setValue(count + ' HOTSPOTS MATCH THE FILTERING CRITERIA.');
      } else {
        hotspotCountLabel.setValue('NO HOTSPOTS FOUND. TRY A LOWER VALUE OR CHANGE REGION.');
      }
    });
  } else {
    hotspotCountLabel.setValue('SOMETHING WENT WRONG. PLEASE RESET.');
  }
}
```

`renderHotspotLayers` classifies each hotspot as “(partially) inside” or “outside” of reserves and then adds two styled map layers (red for outside, orange for inside).

``` js
// C3: Render Hotspot Layers by Reserve Class
function renderHotspotLayers(collection, namePrefix) {
  //create an inside/outside variable for each hotspot
  var hotspotsSimplified = collection.map(function(feature) {
    var reserveClass = feature.get('reserveClass');
    var newClass = ee.Algorithms.If(
      ee.String(reserveClass).equals('outside'),
      'outside',
      'inside'
    );
    return feature.set('newReserveClass', newClass);
  });

  var outside = hotspotsSimplified.filter(ee.Filter.eq('newReserveClass', 'outside'));
  var inside  = hotspotsSimplified.filter(ee.Filter.eq('newReserveClass', 'inside'));

  Map.addLayer(outside, {color: '#FF0000', fillColor: '#FF000088', width: 2}, namePrefix + ' Outside Reserves');
  Map.addLayer(inside, {color: '#ff8c00', fillColor: '#ff8c0088', width: 2}, namePrefix + ' Intersecting Reserves');
}
```

### Section D: UI Components

The main control panel provides the app title and serves as a dynamic container for all sub-panels.

``` js
// D1: Main Control Panel
var mainPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {
    position:       'middle-left',       
    padding:        '8px',
    backgroundColor:'white',
    border:         '1px solid #666',
    borderRadius:   '6px',
    width:          '360px',
    maxHeight:      '80%'            
  }
  });

mainPanel.add(ui.Label('Mapping Crane Density Hotspots to Guide Off‑Reserve Conservation',
  { fontWeight:'bold', fontSize:'20px' }  ));
Map.add(mainPanel);
```

The density slider panel houses the 1-100 percentile slider, explanatory labels, and the hotspot count label for real-time filtering.

``` js
// D2: Density Slider Sub-Panel
var sliderPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {
    position: 'middle-left', padding: '8px', backgroundColor: 'white',
    border: '1px solid #666', borderRadius: '6px', width: '360px', margin: '10px 0 0 8px'
  }
});

sliderPanel.add(ui.Label('Set hotspots density percentile', {
  fontWeight: 'bold', fontSize: '14px',margin: '6px 0px 0px 6px' 
}));

sliderPanel.add(ui.Label('Higher slider values display progressively denser hotspots (0 = areas at the 99th percentile; 1 = only the highest-density areas).', {
  fontWeight: 'normal', fontSize: '12px',margin: '4px 0px 6px 6px', color: '#3b3b3b' 
}));

var percentileSlider = ui.Slider({
  min: 1, max: 100, step: 1, value: threshold_value,
  style: {stretch: 'horizontal'}
});

sliderPanel.add(percentileSlider);
sliderPanel.add(hotspotCountLabel);  
Map.add(sliderPanel);
```

`homeButton` and `resetButton` buttons are created to restore the map view, panel layout, and slider/selection values to their defaults in one click.

``` js
// D3: Home Button
var homeButton = ui.Button({
  label: 'Home',
  style: { stretch: 'horizontal', margin: '20px 8px 8px 8px' },
  onClick: function() {
    Map.layers().reset();
    mainPanel.remove(infoPanel);
    mainPanel.remove(statisticsPanel);
    mainPanel.remove(descriptionPanel);
    mainPanel.add(descriptionPanel);
    mainPanel.remove(regionPanel);
    mainPanel.add(regionPanel);
    mainPanel.remove(homeButton);
    
    countrySelect.setValue(null, false);
    provinceSelect.items().reset(['(No provinces)']);
    provinceSelect.setValue(null, false);
    percentileSlider.setValue(1, false);
    
    Map.addLayer(reservesLayer, {}, 'Nature Reserves', true);
    Map.addLayer(countriesLayer, {}, 'Country borders', true);
    Map.addLayer(corridorLayer, {}, 'Migration corridor', true);
    Map.setCenter(108, 40, 4);
    Map.setOptions('SATELLITE');
    
    Map.remove(sliderPanel)
    Map.add(sliderPanel)
    
    updateHotspotsFromSlider(1);    
  }
});

// D4: Reset Button
var resetButton = ui.Button({
  label: 'Reset',
  style: {stretch: 'horizontal', margin: '20px 8px 8px 8px'},
  onClick: function() {
    
    countrySelect.setValue(null, false);
    provinceSelect.items().reset(['(Select a country first)']);
    provinceSelect.setValue(null, false);

    percentileSlider.setValue(1, false);

    Map.layers().reset();
    Map.addLayer(reservesLayer, {}, 'Nature Reserves', true);
    Map.addLayer(countriesLayer, {}, 'Country borders', true);
    Map.addLayer(corridorLayer, {}, 'Migration corridor', true);
    Map.setCenter(108, 40, 4);
    Map.setOptions('SATELLITE');
    
    mainPanel.remove(homeButton);

    updateHotspotsFromSlider(1);
  }
});
```

`infoPanel` and `statisticsPanel` define hotspot attribute descriptions (crane peak season, total crane counts, reserve coverage status, NDVI, temperature, NO2, water area fraction) and display actual values (via `addInfoRow`) when a hotspot is clicked.

``` js
// D5: Environmental Information Panel
var infoPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical') });
infoPanel.add(ui.Label(
  'Step 2: Retrieve Hotspot Info',
  { fontWeight: 'bold', fontSize: '18px' }
));
infoPanel.add(ui.Label(
  'Click any hotspot to retrieve its crane peak season, total cranes detected, and four important environmental components relevant to their habitats (Batbayar et al., 2024).',
  { whiteSpace: 'wrap', fontSize: '12px' }
));
infoPanel.add(ui.Label('Peak Season:',      { fontWeight:'bold', fontSize:'12px' }));
infoPanel.add(ui.Label('Season with maximum crane density in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));
infoPanel.add(ui.Label('Total Cranes:',      { fontWeight:'bold', fontSize:'12px' }));
infoPanel.add(ui.Label('Number of crane observations recorded in the hotspot.', { whiteSpace:'wrap', fontSize:'12px' }));
infoPanel.add(ui.Label('Reserve coverage (%):',      { fontWeight:'bold', fontSize:'12px' }));
infoPanel.add(ui.Label('Percentage of hotspot area inside a protected nature reserve.', { whiteSpace:'wrap', fontSize:'12px' }));
infoPanel.add(ui.Label('Average NDVI:',     { fontWeight:'bold', fontSize:'12px' }));
infoPanel.add(ui.Label('Mean NDVI during peak season (2018–2021).', { whiteSpace:'wrap', fontSize:'12px' }));
infoPanel.add(ui.Label('Average Temp (°C):',{ fontWeight:'bold', fontSize:'12px' }));
infoPanel.add(ui.Label('Mean 2 m air temperature during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));
infoPanel.add(ui.Label('Average NO₂:',      { fontWeight:'bold', fontSize:'12px' }));
infoPanel.add(ui.Label('Mean tropospheric NO₂ column density during peak season (2018–2021).',{ whiteSpace:'wrap', fontSize:'12px' }));
infoPanel.add(ui.Label('Water Area (%):',   { fontWeight:'bold', fontSize:'12px' }));
infoPanel.add(ui.Label(
  'Percentage of hotspot polygon area classified as water during its peak season.',
  { whiteSpace:'wrap', fontSize:'12px' }
));

// D6: Hotspot Statistics Panel
var statisticsPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical') });

statisticsPanel.style().set({
  minHeight: '100px',
  padding: '10px'
});

function addInfoRow(name, widget) {
  statisticsPanel.add(ui.Panel([
    ui.Label(name + ':', { fontWeight:'bold', fontSize:'12px' }),
    widget
  ], ui.Panel.Layout.flow('horizontal')));
}
```

`descriptionPanel` shows the app’s goal and data span in text, plus a hyperlink to the crane dataset.

``` js
// D7: App Description Sub-Panel
var descriptionPanel = ui.Panel({ layout: ui.Panel.Layout.flow('vertical'), style: { margin:'8px 0 0 0' }});

descriptionPanel.add(ui.Label(
  'This application maps high‑density crane hotspots, many of which lie outside formally protected reserves, to inform off‑reserve conservation planning by displaying each hotspot’s peak‑season environmental drivers of habitat suitability. The dataset spans August 2013 through April 2021.',
  { whiteSpace:'wrap', color:'gray', fontStyle:'italic', fontSize:'13px' }
));

descriptionPanel.add(ui.Label('Click here for the crane source data (Batbayar et al. 2024)', {
  fontSize: '12px', color: 'blue', fontStyle: 'italic', textDecoration: 'underline'
}, 'https://datarepository.movebank.org/entities/datapackage/1e31df42-edfa-4225-b923-d8b0de83ab20'));

mainPanel.add(descriptionPanel);
```

`regionPanel` contains country/province dropdowns (with `onChange` callbacks), labels, and the Reset button to guide users through the region selection. 

``` js
// D8: Region Selection Handlers (Stubs)
var countrySelect  = ui.Select({ placeholder:'Select Country' });
var provinceSelect = ui.Select({ placeholder:'Select Province' });

// D9: Region Selector Panel
var regionPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: { margin:'8px 0 0 0' }
});

regionPanel.add(ui.Label(
  'Step 1: Select Your Region',
  { fontWeight:'bold', fontSize:'14px' }
));
regionPanel.add(ui.Label(
  'Choose a country and a province to zoom in. Layers may take up to one minute to fully process after each click.',
  { whiteSpace:'wrap', fontSize:'12px' }
));

regionPanel.add(ui.Label('Country:',  { fontWeight:'bold', fontSize:'12px' }));
regionPanel.add(countrySelect);
regionPanel.add(ui.Label('Province:', { fontWeight:'bold', fontSize:'12px' }));
regionPanel.add(provinceSelect);
regionPanel.add(resetButton);
mainPanel.add(regionPanel);
```

### Section E: Hotspot Extraction

Crane point counts (count = 1) are rasterized via `reduceToImage` and then convolved with a Gaussian kernel of radius 10 km and σ = 10 km to produce a smooth density surface. In continuous form, the weighting follows:
$$
K(d) = \frac{1}{\sqrt{2\pi}\,\sigma}\exp\!\Bigl(-\frac{d^2}{2\sigma^2}\Bigr),
$$  
This ensures that observations contribute most strongly near their true location and taper off smoothly.

``` js
// E1: Density Image Creation
var kernel = ee.Kernel.gaussian({
    radius: 10000,
    sigma: 10000,
    units: 'meters'
    });
    
var densityImage = cranes
    .map(function(f) {
        return f.set('count', 1);
    })
    .reduceToImage(['count'], ee.Reducer.sum())
    .convolve(kernel)
    .reproject('EPSG:4326', null, 1000)
    .clip(convex_hull);
```

Country/province selection resets layers, zooms to the regional bounds (with borders and reserves redrawn), then filters and renders `hotspotsSimplified` within it. 

``` js
// E2: Country-Based Filtering Handler
onCountryChange = function(countryName) {
  Map.layers().reset()

  var selectedCountryFeatures = countries.filter(ee.Filter.eq('ADM0_NAME', countryName));
  updateHotspotCount(selectedCountryFeatures);

  var provs = provinces
    .filter(ee.Filter.eq('ADM0_NAME', countryName))
    .aggregate_array('ADM1_NAME')
    .distinct()
    .sort();

  provs.evaluate(function(list) {
    provinceSelect.items().reset(list.length ? list : ['(No provinces)']);
  });

  var bounds = selectedCountryFeatures.geometry().bounds();
  getBestZoomLevel(bounds).evaluate(function(z) {
    Map.centerObject(bounds, z);
  });

  Map.add(ui.Map.Layer(selectedCountryFeatures.style({
    color: 'black', fillColor: '#cccccc05', width: 2
  }), {}, countryName + ' Border'));

  Map.add(ui.Map.Layer(natural_reserves.filterBounds(selectedCountryFeatures).style({
    color: '#006400', fillColor: '#00640075', width: 1
  }), {}, countryName +' Nature Reserves'));
  
  var provincesSelected = provinces.filter(ee.Filter.eq('ADM0_NAME', countryName));
  var selectedCountryGeometry = provincesSelected.geometry().dissolve();
  
  Map.add(ui.Map.Layer(provincesSelected.style({
    color: 'black', fillColor: '#cccccc15', width: 1
  }), {}, 'Provinces within migration corridor'));
  
  if (outsideLayer) Map.remove(outsideLayer);
  if (insideLayer) Map.remove(insideLayer);
  
  if (hotspotsSimplified) {
    var filteredHotspots = hotspotsSimplified.filterBounds(selectedCountryGeometry);
    renderHotspotLayers(filteredHotspots, 'Filtered Hotspots');
  }
};

// E3: Province-Based Filtering Handler
onProvinceChange = function(provinceName) {
  Map.style().set('cursor', 'crosshair');
  if (provinceName === '(No provinces)') return;
  
  Map.layers().reset();
  mainPanel.remove(regionPanel)
  mainPanel.remove(descriptionPanel)
  mainPanel.remove(infoPanel)
  mainPanel.add(infoPanel)
  mainPanel.remove(homeButton)
  mainPanel.add(homeButton)
  
  var selectedProvince = provinces.filter(
    ee.Filter.eq('ADM1_NAME', provinceName)
  );
  var bounds = selectedProvince.geometry().bounds();
  getBestZoomLevel(bounds).evaluate(function(z) {
    Map.centerObject(bounds, z);
  });
  updateHotspotCount(selectedProvince.geometry());
  
  var countryName = selectedProvince.first().get('ADM0_NAME');
  var selectedCountryFeatures = countries.filter(
    ee.Filter.eq('ADM0_NAME', countryName)
  );
  
  Map.add(ui.Map.Layer(
    selectedCountryFeatures.style({
      color: '#333333',
      fillColor: '00000000',
      width: 2
    }),
    {},
    countrySelect.getValue() + ' Border'
  ));

  Map.add(ui.Map.Layer(
    provinces.filter(ee.Filter.eq('ADM0_NAME', countryName)).style({
      color: '#0f0f0f',
      fillColor: '#dddddd00',
      width: 1
    }),
    {},
    'Other Provinces'
  ));

  Map.add(ui.Map.Layer(
    natural_reserves.filterBounds(selectedProvince).style({
      color: '#006400',
      fillColor: '#00640075',
      width: 1
    }),
    {},
    'Nature Reserves'
  ));

  Map.add(ui.Map.Layer(
    selectedProvince.style({
      color: 'black',
      fillColor: '#cccccc20',
      width: 2
    }),
    {},
    provinceName + ' Border'
  ));
  
  if (outsideLayer) Map.remove(outsideLayer);
  if (insideLayer) Map.remove(insideLayer);
  
  if (hotspotsSimplified) {
    var filteredHotspots = hotspotsSimplified.filterBounds(selectedProvince);
    renderHotspotLayers(filteredHotspots, 'Filtered Hotspots');
  }
};
```

When the percentile slider changes, the code computes a new density threshold on the smoothed crane-density image for the selected region, vectorizes to polygons, classifies each by reserve coverage, enriches with crane counts plus peak-season NDVI, temperature, NO2, and water-area metrics.

``` js
// E4: Percentile-Based Hotspot Generation
percentileSlider.onChange(function(val) {
  updateHotspotsFromSlider(val);
});

function updateHotspotsFromSlider(clientValue) {
  
  // E4.1: Read slider value
  threshold_value = clientValue;
  
  // E4.2: Determine region geometry
  var region = convex_hull;
  var selectedProvince = provinceSelect.getValue();
  if (selectedProvince && selectedProvince !== '(No provinces)') {
    region = provinces.filter(ee.Filter.eq('ADM1_NAME', selectedProvince)).geometry();
  } else {
    var selectedCountry = countrySelect.getValue();
    if (selectedCountry) {
      region = countries.filter(ee.Filter.eq('ADM0_NAME', selectedCountry)).geometry();
    }
  }
  
  // E4.3: Compute density threshold
  var transformedPercentile = 100 - ((100 - threshold_value) / 99);
  var newThreshold = densityImage.reduceRegion({
    reducer: ee.Reducer.percentile([transformedPercentile]),
    geometry: region,
    scale: 1000,
    bestEffort: true
  }).values().getNumber(0);

  // E4.4: Extract and classify hotspot polygons
  hotspotsSimplified = densityImage
    .clip(region)
    .gte(newThreshold)
    .reduceResolution({ reducer: ee.Reducer.max(), maxPixels: 1024 })
    .selfMask()
    .focal_max({ radius: 50, units: 'meters' })
    .reduceToVectors({
      geometry: convex_hull,
      scale: 2000,
      geometryType: 'polygon',
      eightConnected: false,
      tileScale: 16,
      bestEffort: true,
      maxPixels: 1e13
    }).map(function(f) {
      var geom = f.geometry();
      var areaTotal = geom.area(1);
      var inter = natural_reserves.map(function(r) { return r.intersection(geom, 1); })
                                  .union().geometry();
      var areaInter = inter.area(1);
      var perc = areaInter.divide(areaTotal).multiply(100);
      var reserveClass = ee.String(
        ee.Algorithms.If(perc.lte(5), 'outside', 'inside')
      );
      return f.set({ reserveCoverage: perc, reserveClass: reserveClass }).simplify(2000);
    });

  // E4.5: Enrich with crane counts, env metrics & spatial water‐area
  enrichedHotspots = hotspotsSimplified.map(function(poly) {
    var g = poly.geometry();
    var regionCranes = cranes.filterBounds(g);
    var counts = seasonNames.map(function(s) {
      return regionCranes.filter(ee.Dictionary(seasons).get(s)).size();
    });
    var peak   = seasonNames.get(
                   ee.List(counts).indexOf(ee.List(counts).reduce(ee.Reducer.max()))
                 );
    var total  = regionCranes.size();
    var inRes  = natural_reserves.filterBounds(g).size().gt(0);
    var env = ee.Dictionary(envComposites.get(peak));
    var ndvi = ee.Image(env.get('NDVI')).reduceRegion({
      reducer: ee.Reducer.mean(), geometry: g, scale: 500, maxPixels: 1e9
    }).get('NDVI');
    var temp = ee.Image(env.get('Temp')).reduceRegion({
      reducer: ee.Reducer.mean(), geometry: g, scale: 1000, maxPixels: 1e9
    }).get('Temp');
    var no2  = ee.Image(env.get('NO2')).reduceRegion({
      reducer: ee.Reducer.mean(), geometry: g, scale: 1000, maxPixels: 1e9
    }).get('NO2');
    var waterMaskImg = ee.Image(
      ee.Dictionary(waterMaskComposites).get(peak)
    );
    var waterAreaFrac = ee.Number(
      waterMaskImg.reduceRegion({
        reducer: ee.Reducer.mean(),
        geometry: g,
        scale: 30,
        bestEffort: true,
        maxPixels: 1e9
      }).get('WaterMask')   
    ).multiply(100);
    return poly.set({
      peakSeason:    peak,
      totalCranes:   total,
      inReserve:     inRes,
      NDVI:          ndvi,
      Temp:          temp,
      NO2:           no2,
      WaterAreaFrac: waterAreaFrac
    }).setGeometry(g.transform('EPSG:4326', 1));
  });

  // E4.6: Render layers & update hotspot count
  if (outsideLayer) Map.remove(outsideLayer);
  if (insideLayer) Map.remove(insideLayer);
  renderHotspotLayers(hotspotsSimplified, 'Filtered Hotspots');

  var selProv = provinceSelect.getValue();
  if (selProv && selProv !== '(No provinces)') {
    updateHotspotCount(provinces.filter(ee.Filter.eq('ADM1_NAME', selProv)).geometry());
  } else {
    var selCtr = countrySelect.getValue();
    if (selCtr) {
      updateHotspotCount(countries.filter(ee.Filter.eq('ADM0_NAME', selCtr)).geometry());
    } else {
      updateHotspotCount(convex_hull.geometry());
    }
  }
}
```

### Section F: UI Setting & Legend

Country and province dropdowns are populated with names from the GAUL dataset, and their `onChange` events are linked to the filtering handlers defined earlier.

``` js
// F1: Dropdown Initialization & Callbacks
countrySelect.onChange(onCountryChange);
provinceSelect.onChange(onProvinceChange);
countries.aggregate_array('ADM0_NAME').distinct().sort().evaluate(function(list) {
  countrySelect.items().reset(list);
});
```

A map click event hides region‐selection panels, shows the statistics panel, and fetches the clicked hotspot’s properties from `enrichedHotspots` to populate detailed rows through `addInfoRow`. The legend is created at the end.

``` js
// F2: Interaction when clicking hotspot
Map.onClick(function(coords) {
  mainPanel.remove(regionPanel);
  mainPanel.remove(descriptionPanel);
  mainPanel.remove(infoPanel);
  mainPanel.remove(statisticsPanel);
  mainPanel.add(statisticsPanel);
  mainPanel.remove(homeButton);
  mainPanel.add(homeButton);
  Map.remove(sliderPanel);

  statisticsPanel.clear();
  statisticsPanel.add(ui.Label('Hotspot Information loading...', { fontStyle: 'italic' }));

  var pt = ee.Geometry.Point([coords.lon, coords.lat]);
  enrichedHotspots.filterBounds(pt).first().evaluate(function(f) {
    statisticsPanel.clear();
    if (!f) {
      statisticsPanel.add(ui.Label('No hotspot here.'));
    } else {
      statisticsPanel.add(ui.Label('Hotspot Info', { fontWeight:'bold', fontSize:'16px' }));
      addInfoRow('- Peak Season', ui.Label(f.properties.peakSeason));
      addInfoRow('- Total Cranes', ui.Label(f.properties.totalCranes));
      addInfoRow('- Reserve coverage (%)', ui.Label(
        (f.properties.reserveCoverage !== null) ?
        f.properties.reserveCoverage.toFixed(1) + '%' : 'N/A'
      ));
      addInfoRow('- Average NDVI', ui.Label(
        (f.properties.NDVI !== null) ?
        f.properties.NDVI.toFixed(3) : 'N/A'
      ));
      addInfoRow('- Average Temp (°C)', ui.Label(
        (f.properties.Temp !== null) ?
        f.properties.Temp.toFixed(2) : 'N/A'
      ));
      addInfoRow('- Average NO₂', ui.Label(
        (f.properties.NO2 !== null) ?
        Number(f.properties.NO2).toExponential(2) : 'N/A'
      ));
      addInfoRow('- Water Area (%)', ui.Label(
        (f.properties.WaterAreaFrac !== null) ?
        Number(f.properties.WaterAreaFrac).toFixed(1) + '%' : 'N/A'
      ));
    }
  });
});

// F3: Legend
var legend = ui.Panel({
  style: {
    position: 'bottom-right', padding: '8px', backgroundColor: 'white'
  }
});
legend.add(ui.Label('Legend',
  {fontWeight:'bold', fontSize:'16px', margin:'0 0 4px 0'}
));

function makeLegendSymbol(fillColor, borderColor, name) {
  return ui.Panel([
    ui.Label('', {
      backgroundColor: fillColor,
      padding: '8px',
      margin:  '0 0 4px 0',
      width:   '18px',
      height:  '18px',
      border:  '1px solid ' + borderColor
    }),
    ui.Label(name, {margin:'0 0 4px 6px'})
  ], ui.Panel.Layout.flow('horizontal'));
}
legend.add(makeLegendSymbol('#FF000088', '#FF0000', 'Hotspots Outside Reserves'));
legend.add(makeLegendSymbol('#ff8c0088', '#ff8c00', 'Hotspots Inside or Partially Inside Reserves'));

legend.add(makeLegendSymbol('#FFFFFF','#000000', 'Migration Corridor'))
      .add(makeLegendSymbol('rgba(0,100,0,0.53)', '#006400', 'Nature Reserves'));
Map.add(legend);

// ========================= RUN APP =========================

updateHotspotsFromSlider(threshold_value);
```

### Refrences
Batbayar, N., Galtbalt, B., Natsagdorj, T., et al. (2024) White-naped crane Mongolia WSCC. Movebank Data Repository. Available at: https://doi.org/10.5441/001/1.600.
Collen, B., Pettorelli, N., Baillie, J.E.M., et al. (2013) “Biodiversity Monitoring and Conservation: Bridging the Gaps Between Global Commitment and Local Action.” In Collen, B., Pettorelli, N., Baillie, J.E.M., et al. (eds.) Biodiversity Monitoring and Conservation. 1st ed. Wiley. pp. 1–16. doi:10.1002/9781118490747.ch1.
Rose, D.C., Sutherland, W.J., Amano, T., et al. (2018) The major barriers to evidence‐informed conservation policy and possible solutions. Conservation Letters, 11 (5): e12564. doi:10.1111/conl.12564.
Runge, C.A., Martin, T.G., Possingham, H.P., et al. (2014) Conserving mobile species. Frontiers in Ecology and the Environment, 12 (7): 395–402. doi:10.1890/130237.
Turner, W., Spector, S., Gardiner, N., et al. (2003) Remote sensing for biodiversity science and conservation. Trends in ecology & evolution, 18 (6): 306–314.
Wilcove, D.S. and Wikelski, M. (2008) Going, going, gone: is animal migration disappearing. PLoS biology, 6 (7): e188.

